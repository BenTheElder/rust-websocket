var searchIndex = {};
searchIndex['websocket'] = {"items":[[0,"","websocket",""],[1,"WebSocketServer","","Represents a WebSocket server"],[1,"WebSocketAcceptor","","Represents an Acceptor, capable of accepting WebSocketConnections."],[1,"WebSocketClient","","Represents a WebSocket client."],[0,"headers","","Structs for manipulation of HTTP headers"],[1,"HeaderCollection","websocket::headers","Represents a collection of HTTP headers"],[1,"Headers","","Iterates over the headers present in a HeaderCollection"],[0,"handshake","websocket","Structs for WebSocket handshake requests and responses"],[1,"WebSocketRequest","websocket::handshake","Represents a WebSocket handshake request, which is sent from the client to the server.\nUse the new() function to create a new request."],[11,"resource_name","","The resource name of the request. E.g. /path/to/resource for the URI ws://www.example.com/path/to/resource",0],[11,"headers","","The collection of headers contained in this request",0],[1,"WebSocketResponse","","Represents a WebSocket response from a server"],[11,"status_code","","The status code of the response (for a successful handshake, this should be 101)",1],[11,"reason_phrase","","The human readable reason phrase for the status code (E.g. Switching Protocols)",1],[11,"headers","","The collection of headers contained in this WebSocket response",1],[0,"message","websocket","Structs for WebSocket messages and the transmission of messages"],[1,"WebSocketSender","websocket::message","Represents a WebSocket sender, capable of transmitting data to the remote endpoint."],[1,"WebSocketFragmentSerializer","","Allows for the serialization of message fragments, to be sent to the remote endpoint."],[1,"WebSocketReceiver","","Represents a WebSocket receiver which can receive data from the remote endpoint."],[1,"IncomingMessages","","An iterator over incoming messages"],[2,"WebSocketMessage","","Represents a WebSocket message"],[12,"Text","","A message containing UTF-8 text data",2],[12,"Binary","","A message containing binary data",2],[12,"Close","","A message which indicates closure of the WebSocket connection",2],[12,"Ping","","A ping message - should be responded to with a pong message",2],[12,"Pong","","A pong message",2],[10,"new","websocket::headers","Creates a new HeaderCollection",3],[10,"insert","","Add the given field-value pair to the collection. If the field is already present,\nthe value is appended to the header using comma-separation.",3],[10,"contains_field","","Returns true when the specified case-insensitive field name exists in the HeaderCollection.",3],[10,"get","","Gets the value of the header with the specified field name.",3],[10,"remove","","Removes the header with the specified field name from the HeaderCollection.",3],[10,"iter","","Returns an iterator which iterates over each header in the HeaderCollection.",3],[10,"clone","","",3],[10,"next","","",4],[10,"new","websocket::handshake","Creates a new WebSocket handshake request for use with WebSocketClient::connect().",0],[10,"clone","","",0],[10,"new","","Create a new WebSocket response based on the base-64 encoded key from a client.",1],[10,"is_okay","","Returns true if this response indicates a successful handshake",1],[10,"clone","","",1],[10,"check_request","websocket::headers","",3],[10,"check_response","","",3],[10,"bind","websocket","Binds the WebSocketServer to the specified address. You must call WebSocketServer::listen()\nto actually start listening for connections.",5],[10,"listen","","Begin listening for connections - WebSocketServer::bind() must be called beforehand.",5],[10,"accept","","",6],[10,"connect","","Connect to the WebSocket server using the given request. Use WebSocketRequest::new() to create a request for use\nwith this function.",7],[10,"from_stream","","Creates a new WebSocketClient from a given TcpStream.\nThe mask parameter determines whether or not messages send to the remote endpoint will be masked.\nIf the client is connecting to a remote endpoint, set mask to true. If the client is the remote\nendpoint (and therefore, the server is the local endpoint), set mask to false.\nTypically, WebSocketClient::create() will be used instead of this function.",7],[10,"receive_handshake_request","","Reads a request from this client. Only to be used if the server is the local endpoint and\nthe client is the remote endpoint.",7],[10,"send_handshake_response","","Sends the specified WebSocketResponse to this client. Only to be used if the server is\nthe local endpoint and the client is the remote endpoint.",7],[10,"sender","","Returns a WebSocketSender from this client. Used to transmit data to the remote endpoint,\nthat is, to the server if WebSocketClient::connect() has been used, or to this client otherwise.",7],[10,"receiver","","Returns a WebSocketReceiver from this client. Used to receive data from the remote endpoint,\nthat is, from the server if WebSocketClient::connect() has been used, or from this client otherwise.",7],[10,"clone","","",7],[10,"send_message","websocket::message","Sends a message to the remote endpoint.",8],[10,"fragment","","Returns a fragment serializer, able to send fragments of a message to the remote endpoint.",8],[10,"send_fragment","","Send a fragment of a message - if the message is finished, use the WebSocketFragmentSerializer::finish() function.\nCan only be used with a Text or Binary message.",9],[10,"finish","","Send the final message and tell the remote endpoint the message is complete. Can be used with an empty message if necessary.\nCan only be used with a Text or Binary message.",9],[10,"receive_message","","Wait for and accept a message (subjected to the underlying stream timeout).\nIf the received message is fragmented, this function will not return\nuntil the final fragment has been received.\nIf a control frame is received interleaved within a fragmented message,\nThe control frame will be returned first, and the message will be returned\non the next call to the function (or later if more control frames are received).",10],[10,"incoming","","Returns an iterator over the incoming messages for/from this client",10],[10,"next","","",11],[10,"fmt","","",2],[10,"new","websocket::handshake","Creates a new WebSocket handshake request for use with WebSocketClient::connect().",0],[10,"clone","","",0],[10,"new","","Create a new WebSocket response based on the base-64 encoded key from a client.",1],[10,"is_okay","","Returns true if this response indicates a successful handshake",1],[10,"clone","","",1],[10,"check_request","websocket::headers","",3],[10,"check_response","","",3],[10,"bind","websocket","Binds the WebSocketServer to the specified address. You must call WebSocketServer::listen()\nto actually start listening for connections.",5],[10,"listen","","Begin listening for connections - WebSocketServer::bind() must be called beforehand.",5],[10,"accept","","",6],[10,"connect","","Connect to the WebSocket server using the given request. Use WebSocketRequest::new() to create a request for use\nwith this function.",7],[10,"from_stream","","Creates a new WebSocketClient from a given TcpStream.\nThe mask parameter determines whether or not messages send to the remote endpoint will be masked.\nIf the client is connecting to a remote endpoint, set mask to true. If the client is the remote\nendpoint (and therefore, the server is the local endpoint), set mask to false.\nTypically, WebSocketClient::create() will be used instead of this function.",7],[10,"receive_handshake_request","","Reads a request from this client. Only to be used if the server is the local endpoint and\nthe client is the remote endpoint.",7],[10,"send_handshake_response","","Sends the specified WebSocketResponse to this client. Only to be used if the server is\nthe local endpoint and the client is the remote endpoint.",7],[10,"sender","","Returns a WebSocketSender from this client. Used to transmit data to the remote endpoint,\nthat is, to the server if WebSocketClient::connect() has been used, or to this client otherwise.",7],[10,"receiver","","Returns a WebSocketReceiver from this client. Used to receive data from the remote endpoint,\nthat is, from the server if WebSocketClient::connect() has been used, or from this client otherwise.",7],[10,"clone","","",7],[10,"new","websocket::headers","Creates a new HeaderCollection",3],[10,"insert","","Add the given field-value pair to the collection. If the field is already present,\nthe value is appended to the header using comma-separation.",3],[10,"contains_field","","Returns true when the specified case-insensitive field name exists in the HeaderCollection.",3],[10,"get","","Gets the value of the header with the specified field name.",3],[10,"remove","","Removes the header with the specified field name from the HeaderCollection.",3],[10,"iter","","Returns an iterator which iterates over each header in the HeaderCollection.",3],[10,"clone","","",3],[10,"next","","",4]],"paths":[[1,"WebSocketRequest"],[1,"WebSocketResponse"],[2,"WebSocketMessage"],[1,"HeaderCollection"],[1,"Headers"],[1,"WebSocketServer"],[1,"WebSocketAcceptor"],[1,"WebSocketClient"],[1,"WebSocketSender"],[1,"WebSocketFragmentSerializer"],[1,"WebSocketReceiver"],[1,"IncomingMessages"]]};
initSearch(searchIndex);
